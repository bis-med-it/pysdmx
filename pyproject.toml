[project]
name = "pysdmx"
version = "1.2.0"
description = "Your opinionated Python SDMX library"
license = { text = "Apache-2.0" }
readme = "README.rst"
requires-python = ">=3.9"
authors = [
    { name = "Xavier Sosnovsky", email = "<xavier.sosnovsky@bis.org>" },
    { name = "Stratos Nikoloutsos", email = "<stratos.nikoloutsos@bis.org>" },
    { name = "Francisco Javier Hernandez del Caño", email = "<javier.hernandez@meaningfuldata.eu>" },
    { name = "Mateo de Lorenzo Argelés", email = "<mateo.delorenzo@meaningfuldata.eu>" }
]
keywords = ["sdmx", "data discovery", "data retrieval", "metadata", "fmr"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Typing :: Typed"
]
dependencies = [
    "httpx>=0.*",
    "msgspec>=0.*",
    "parsy>=2.1",
]

[project.urls]
homepage = "https://sdmx.io/tools/pysdmx"
repository = "https://github.com/bis-med-it/pysdmx"
documentation = "https://bis-med-it.github.io/pysdmx"
"Bug Tracker" = "https://bis-med-it.github.io/pysdmx/issues"

[project.optional-dependencies]
data = ["pandas>=2.1.4"]
dc = ["python-dateutil>=2.8.2"]
vtl = ["vtlengine>=1.1rc1"]
xml = ["lxml>=5.2", "xmltodict>=0.13", "sdmxschemas>=0.2.0"]
all = ["lxml>=5.2", "xmltodict>=0.13", "sdmxschemas>=0.2.0", "pandas>=2.1.4", "python-dateutil>=2.8.2", "vtlengine>=1.1rc1"]

[tool.poetry]
requires-poetry = ">=2.0"

[tool.poetry.dependencies]
python = ">=3.9,<4.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.8.1"
mypy = "^1.1.1"
pytest = "^8.3.2"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.0.0"
respx = "^0.22.0"
pyroma = "^4.2"
lxml-stubs = "^0.5.1"
types-xmltodict = "^0.13.0.3"
types-python-dateutil = "^2.9.0.20240316"
pandas-stubs = "^2.1.4.231227"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.2.6"
sphinx-rtd-theme = "^1.3.0"
sphinx-autodoc-typehints = "^1.24.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 79
lint.select = [
    "B", "B9", "C", "C4", "D", "E", "F", "I", "PT", "S", "SIM", "W"
]
lint.ignore = [
    "E203", "D411", "F901", "S320"
]
lint.mccabe.max-complexity = 10
lint.pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S311", "D100", "D103", "D104"]

[tool.mypy]
files = "src"
disallow_untyped_defs = true
disallow_untyped_calls = true
ignore_errors = false
no_implicit_optional = true
show_column_numbers = true
strict_equality = true
strict_optional = true
strict = true
enable_error_code = [
    "redundant-expr",
    "truthy-bool",
]
warn_return_any = false

[tool.coverage.run]
branch = true
omit = [
    # We cannot test this properly with pytest as we always install all extras
    "__extras_check.py"
]
